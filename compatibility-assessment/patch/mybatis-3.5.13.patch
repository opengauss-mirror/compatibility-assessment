diff -Naur a/pom.xml b/pom.xml
--- a/pom.xml	2023-07-21 14:59:18.385889393 +0800
+++ b/pom.xml	2023-07-21 16:08:12.639331090 +0800
@@ -26,7 +26,7 @@
     <relativePath />
   </parent>
 
-  <artifactId>mybatis</artifactId>
+  <artifactId>mybatis-sql-extract</artifactId>
   <version>3.5.13</version>
   <packaging>jar</packaging>
 
diff -Naur a/src/main/java/org/apache/ibatis/builder/BaseBuilder.java b/src/main/java/org/apache/ibatis/builder/BaseBuilder.java
--- a/src/main/java/org/apache/ibatis/builder/BaseBuilder.java	2023-07-21 14:59:18.353889065 +0800
+++ b/src/main/java/org/apache/ibatis/builder/BaseBuilder.java	2023-07-21 16:12:33.912917865 +0800
@@ -115,7 +115,7 @@
     try {
       return resolveAlias(alias);
     } catch (Exception e) {
-      throw new BuilderException("Error resolving class. Cause: " + e, e);
+      return null;
     }
   }
 
diff -Naur a/src/main/java/org/apache/ibatis/builder/MapperBuilderAssistant.java b/src/main/java/org/apache/ibatis/builder/MapperBuilderAssistant.java
--- a/src/main/java/org/apache/ibatis/builder/MapperBuilderAssistant.java	2023-07-21 14:59:18.353889065 +0800
+++ b/src/main/java/org/apache/ibatis/builder/MapperBuilderAssistant.java	2023-09-13 17:38:05.127096977 +0800
@@ -158,7 +158,7 @@
 
     if (extend != null) {
       if (!configuration.hasResultMap(extend)) {
-        throw new IncompleteElementException("Could not find a parent resultmap with id '" + extend + "'");
+	return null;
       }
       ResultMap resultMap = configuration.getResultMap(extend);
       List<ResultMapping> extendedResultMappings = new ArrayList<>(resultMap.getResultMappings());
@@ -320,8 +320,7 @@
         try {
           resultMaps.add(configuration.getResultMap(resultMapName.trim()));
         } catch (IllegalArgumentException e) {
-          throw new IncompleteElementException(
-              "Could not find result map '" + resultMapName + "' referenced from '" + statementId + "'", e);
+	    return resultMaps;
         }
       }
     } else if (resultType != null) {
diff -Naur a/src/main/java/org/apache/ibatis/builder/xml/XMLMapperBuilder.java b/src/main/java/org/apache/ibatis/builder/xml/XMLMapperBuilder.java
--- a/src/main/java/org/apache/ibatis/builder/xml/XMLMapperBuilder.java	2023-07-21 14:59:18.353889065 +0800
+++ b/src/main/java/org/apache/ibatis/builder/xml/XMLMapperBuilder.java	2023-09-13 14:42:08.822962441 +0800
@@ -389,8 +389,7 @@
     String javaType = context.getStringAttribute("javaType");
     String jdbcType = context.getStringAttribute("jdbcType");
     String nestedSelect = context.getStringAttribute("select");
-    String nestedResultMap = context.getStringAttribute("resultMap",
-        () -> processNestedResultMappings(context, Collections.emptyList(), resultType));
+    String nestedResultMap = null;
     String notNullColumn = context.getStringAttribute("notNullColumn");
     String columnPrefix = context.getStringAttribute("columnPrefix");
     String typeHandler = context.getStringAttribute("typeHandler");
diff -Naur a/src/main/java/org/apache/ibatis/mapping/ResultMapping.java b/src/main/java/org/apache/ibatis/mapping/ResultMapping.java
--- a/src/main/java/org/apache/ibatis/mapping/ResultMapping.java	2023-07-21 14:59:18.356889096 +0800
+++ b/src/main/java/org/apache/ibatis/mapping/ResultMapping.java	2023-09-13 14:42:58.505464359 +0800
@@ -136,8 +136,6 @@
       // lock down collections
       resultMapping.flags = Collections.unmodifiableList(resultMapping.flags);
       resultMapping.composites = Collections.unmodifiableList(resultMapping.composites);
-      resolveTypeHandler();
-      validate();
       return resultMapping;
     }
 
diff -Naur a/src/main/java/org/apache/ibatis/parsing/GenericTokenParser.java b/src/main/java/org/apache/ibatis/parsing/GenericTokenParser.java
--- a/src/main/java/org/apache/ibatis/parsing/GenericTokenParser.java	2023-07-21 14:59:18.356889096 +0800
+++ b/src/main/java/org/apache/ibatis/parsing/GenericTokenParser.java	2023-11-10 15:59:43.318023221 +0800
@@ -15,6 +15,11 @@
  */
 package org.apache.ibatis.parsing;
 
+import java.util.Arrays;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
+
 /**
  * @author Clinton Begin
  */
@@ -23,6 +28,11 @@
   private final String openToken;
   private final String closeToken;
   private final TokenHandler handler;
+  private final Set<String> keywordSet = new HashSet<>(Arrays.asList(
+            "SELECT", "INSERT", "UPDATE", "DELETE", "CREATE", "ALTER",
+            "DROP", "TRUNCATE", "WHERE", "ORDER", "GROUP", "HAVING", "JOIN",
+            "LEFT", "RIGHT", "INNER", "UNION", "DISTINCT", "LIMIT", "OFFSET"
+    ));
 
   public GenericTokenParser(String openToken, String closeToken, TokenHandler handler) {
     this.openToken = openToken;
@@ -30,6 +40,13 @@
     this.handler = handler;
   }
 
+  private String handleExpression(StringBuilder expression) {
+    if (keywordSet.contains(expression.toString().toUpperCase())) {
+        return expression.toString() + "_value";
+    }
+    return expression.toString();
+  }
+
   public String parse(String text) {
     if (text == null || text.isEmpty()) {
       return "";
@@ -40,6 +57,7 @@
       return text;
     }
     char[] src = text.toCharArray();
+    int order = 1;
     int offset = 0;
     final StringBuilder builder = new StringBuilder();
     StringBuilder expression = null;
@@ -73,7 +91,17 @@
           builder.append(src, start, src.length - start);
           offset = src.length;
         } else {
-          builder.append(handler.handleToken(expression.toString()));
+          handler.handleToken(expression.toString());
+	  if ("#{".equals(this.openToken)) {
+            builder.append("$" + order);
+            order++;
+          } else {
+	    if (builder.toString().trim().toLowerCase().endsWith("in")) {
+		builder.append("(" + handleExpression(expression) + ")");
+	    } else {
+                builder.append(handleExpression(expression));
+	    }
+          }
           offset = end + closeToken.length();
         }
       }
diff -Naur a/src/main/java/org/apache/ibatis/scripting/xmltags/DynamicContext.java b/src/main/java/org/apache/ibatis/scripting/xmltags/DynamicContext.java
--- a/src/main/java/org/apache/ibatis/scripting/xmltags/DynamicContext.java	2023-07-21 14:59:18.357889106 +0800
+++ b/src/main/java/org/apache/ibatis/scripting/xmltags/DynamicContext.java	2023-11-24 15:52:04.642584627 +0800
@@ -70,6 +70,8 @@
     return sqlBuilder.toString().trim();
   }
 
+  public String getInnerSql() {return  getSql();}
+
   public int getUniqueNumber() {
     return uniqueNumber++;
   }
diff -Naur a/src/main/java/org/apache/ibatis/scripting/xmltags/ForEachSqlNode.java b/src/main/java/org/apache/ibatis/scripting/xmltags/ForEachSqlNode.java
--- a/src/main/java/org/apache/ibatis/scripting/xmltags/ForEachSqlNode.java	2023-07-21 14:59:18.357889106 +0800
+++ b/src/main/java/org/apache/ibatis/scripting/xmltags/ForEachSqlNode.java	2023-11-25 09:43:45.486703017 +0800
@@ -15,8 +15,9 @@
  */
 package org.apache.ibatis.scripting.xmltags;
 
+import java.util.ArrayList;
+import java.util.Iterator;
 import java.util.Map;
-import java.util.Optional;
 
 import org.apache.ibatis.parsing.GenericTokenParser;
 import org.apache.ibatis.session.Configuration;
@@ -68,15 +69,16 @@
   @Override
   public boolean apply(DynamicContext context) {
     Map<String, Object> bindings = context.getBindings();
-    final Iterable<?> iterable = evaluator.evaluateIterable(collectionExpression, bindings,
-        Optional.ofNullable(nullable).orElseGet(configuration::isNullableOnForEach));
-    if (iterable == null || !iterable.iterator().hasNext()) {
+    ArrayList<Object> al = new ArrayList<Object>();
+    al.add(new Object());
+    if (!al.iterator().hasNext()) {
       return true;
     }
     boolean first = true;
     applyOpen(context);
     int i = 0;
-    for (Object o : iterable) {
+    for (Iterator it = al.iterator(); it.hasNext(); ++i) {
+      Object o = it.next();
       DynamicContext oldContext = context;
       if (first || separator == null) {
         context = new PrefixedContext(context, "");
@@ -137,7 +139,7 @@
     return ITEM_PREFIX + item + "_" + i;
   }
 
-  private static class FilteredDynamicContext extends DynamicContext {
+  static class FilteredDynamicContext extends DynamicContext {
     private final DynamicContext delegate;
     private final int index;
     private final String itemIndex;
@@ -168,6 +170,11 @@
     }
 
     @Override
+    public String getInnerSql() {
+      return delegate.getInnerSql();
+    }
+
+    @Override
     public void appendSql(String sql) {
       GenericTokenParser parser = new GenericTokenParser("#{", "}", content -> {
         String newContent = content.replaceFirst("^\\s*" + item + "(?![^.,:\\s])", itemizeItem(item, index));
@@ -228,6 +235,11 @@
     }
 
     @Override
+    public String getInnerSql() {
+      return delegate.getInnerSql();
+    }
+
+    @Override
     public int getUniqueNumber() {
       return delegate.getUniqueNumber();
     }
diff -Naur a/src/main/java/org/apache/ibatis/scripting/xmltags/IfSqlNode.java b/src/main/java/org/apache/ibatis/scripting/xmltags/IfSqlNode.java
--- a/src/main/java/org/apache/ibatis/scripting/xmltags/IfSqlNode.java	2023-07-21 14:59:18.357889106 +0800
+++ b/src/main/java/org/apache/ibatis/scripting/xmltags/IfSqlNode.java	2023-11-23 20:30:53.099035836 +0800
@@ -31,11 +31,8 @@
 
   @Override
   public boolean apply(DynamicContext context) {
-    if (evaluator.evaluateBoolean(test, context.getBindings())) {
-      contents.apply(context);
-      return true;
-    }
-    return false;
+    contents.apply(context);
+    return true;
   }
 
 }
diff -Naur a/src/main/java/org/apache/ibatis/scripting/xmltags/StaticTextSqlNode.java b/src/main/java/org/apache/ibatis/scripting/xmltags/StaticTextSqlNode.java
--- a/src/main/java/org/apache/ibatis/scripting/xmltags/StaticTextSqlNode.java	2023-07-21 14:59:18.357889106 +0800
+++ b/src/main/java/org/apache/ibatis/scripting/xmltags/StaticTextSqlNode.java	2023-11-30 14:22:18.072538216 +0800
@@ -15,20 +15,86 @@
  */
 package org.apache.ibatis.scripting.xmltags;
 
+import java.util.Arrays;
+import java.util.List;
+import java.util.StringJoiner;
+import java.util.regex.Pattern;
+
 /**
  * @author Clinton Begin
  */
 public class StaticTextSqlNode implements SqlNode {
-  private final String text;
 
-  public StaticTextSqlNode(String text) {
-    this.text = text;
-  }
-
-  @Override
-  public boolean apply(DynamicContext context) {
-    context.appendSql(text);
-    return true;
-  }
+    private static final List<String> concateList = Arrays.asList("AND", "OR", "IN", "NOT IN", "LIKE", "LIMIT", "BETWEEN",
+            "ORDER BY", "GROUP BY", "HAVING", "JOIN", "LEFT JOIN", "RIGHT JOIN", "INNER JOIN", "WHERE", "VALUES", ",",
+            "SELECT", "INSERT", "UPDATE", "DROP", "DELETE", "FROM", "SET", "INTO", "WHEN", "CASE", "END", "DISTINCT");
+
+    private final String text;
+
+    public StaticTextSqlNode(String text) {
+        this.text = text;
+    }
+
+    @Override
+    public boolean apply(DynamicContext context) {
+        if (isConcateSql(context)) {
+            context.appendSql(text);
+            return true;
+        }
+        return false;
+    }
+
+    private boolean isConcateSql(DynamicContext context) {
+        String sql_fragment = context.getInnerSql().toUpperCase();
+        if (sql_fragment.length() == 0 || text.trim().length() == 0) {
+            return true;
+        }
+        boolean endWithKeyword = false;
+        boolean startWithKeyword = false;
+        for (String keyword : concateList) {
+            if (startWithKeyword && endWithKeyword) break;
+            if (!endWithKeyword && sql_fragment.endsWith(keyword)) {
+                endWithKeyword = true;
+            }
+            if (!startWithKeyword && text.toUpperCase().trim().startsWith(keyword)) {
+                startWithKeyword = true;
+            }
+        }
+
+        if (!handleTheSame(startWithKeyword, endWithKeyword, sql_fragment)) {
+            return false;
+        }
+        if (!handleOrderBy(context)) {
+            return false;
+        }
+
+        return true;
+    }
+
+    private boolean handleTheSame(boolean startWithKeyword, boolean endWithKeyword, String sql_fragment) {
+	if (startWithKeyword != endWithKeyword) return true;
+        if (!startWithKeyword && !endWithKeyword && (sql_fragment.endsWith("(") || text.trim().startsWith("("))) {
+            return true;
+        }
+        if (startWithKeyword && endWithKeyword) {
+            if (sql_fragment.endsWith("INSERT") && text.trim().toUpperCase().startsWith("INTO")) {
+                return true;
+            }
+            if (sql_fragment.endsWith("DELETE") && text.trim().toUpperCase().startsWith("FROM")) {
+                return true;
+            }
+            if (sql_fragment.endsWith("SELECT") && text.trim().toUpperCase().startsWith("DISTINCT")) {
+                return  true;
+            }
+        }
+        return false;
+    }
 
+    private boolean handleOrderBy(DynamicContext context) {
+        String sql_fragment = context.getInnerSql().toUpperCase();
+        if (sql_fragment.indexOf("ORDER BY") != -1 && text.toUpperCase().trim().indexOf("ORDER BY") != -1) {
+            return false;
+        }
+        return true;
+    }
 }
diff -Naur a/src/main/java/org/apache/ibatis/scripting/xmltags/TrimSqlNode.java b/src/main/java/org/apache/ibatis/scripting/xmltags/TrimSqlNode.java
--- a/src/main/java/org/apache/ibatis/scripting/xmltags/TrimSqlNode.java	2023-07-21 14:59:18.357889106 +0800
+++ b/src/main/java/org/apache/ibatis/scripting/xmltags/TrimSqlNode.java	2023-11-24 15:51:05.874000568 +0800
@@ -72,7 +72,7 @@
     return Collections.emptyList();
   }
 
-  private class FilteredDynamicContext extends DynamicContext {
+  class FilteredDynamicContext extends DynamicContext {
     private final DynamicContext delegate;
     private boolean prefixApplied;
     private boolean suffixApplied;
@@ -121,6 +121,10 @@
       return delegate.getSql();
     }
 
+    public String getInnerSql() {
+      return this.sqlBuffer.toString().trim();
+    }
+
     private void applyPrefix(StringBuilder sql, String trimmedUppercaseSql) {
       if (!prefixApplied) {
         prefixApplied = true;
diff -Naur a/src/main/java/org/apache/ibatis/scripting/xmltags/VarDeclSqlNode.java b/src/main/java/org/apache/ibatis/scripting/xmltags/VarDeclSqlNode.java
--- a/src/main/java/org/apache/ibatis/scripting/xmltags/VarDeclSqlNode.java	2023-07-21 14:59:18.357889106 +0800
+++ b/src/main/java/org/apache/ibatis/scripting/xmltags/VarDeclSqlNode.java	2023-11-10 16:59:54.109851059 +0800
@@ -30,8 +30,7 @@
 
   @Override
   public boolean apply(DynamicContext context) {
-    final Object value = OgnlCache.getValue(expression, context.getBindings());
-    context.bind(name, value);
+    context.bind(name, null);
     return true;
   }
 
